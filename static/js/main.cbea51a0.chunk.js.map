{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["darkTheme","require","gradient","data","step","startTime","HeatMapComponent","props","react_default","a","createElement","dist","key","Date","now","opacity","positions","radius","map","google","MapContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filter","d","time","paused","_this2","setInterval","setState","concat","toConsumableArray","Array","lat","lng","_this3","isNight","Math","ceil","id","onClick","togglePause","floor","initialCenter","zoom","styles","Map_HeatMapComponent","React","Component","GoogleApiWrapper","apiKey","libraries","App","className","Map","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2pqj5BAGMA,EAAYC,EAAQ,IAEpBC,EAAW,CACf,uBACA,uBACA,uBACA,uBACA,sBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBACA,sBACA,sBAGIC,EAAOF,EAAQ,IAEfG,EAAO,GACPC,EAAY,IAEZC,EAAmB,SAAAC,GACvB,OACEC,EAAAC,EAAAC,cAACC,EAAA,QAAD,CACEC,IAAKC,KAAKC,MACVZ,SAAUA,EACVa,QAAS,GACTC,UAAWT,EAAMJ,KACjBc,OAAQ,GACRC,IAAKX,EAAMW,IACXC,OAAQZ,EAAMY,UAKdC,cACJ,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KAEDqB,MAAQ,CACXzB,KAAMA,EAAK0B,OAAO,SAAAC,GAAC,OAAIA,EAAEC,MAAQ1B,GAAayB,EAAEC,KAAO1B,EAAYD,IACnE2B,KAAM1B,EACN2B,QAAQ,GANOX,mFAUC,IAAAY,EAAAT,KAClBU,YAAY,WACLD,EAAKL,MAAMI,QACdC,EAAKE,SAAS,CACZhC,KAAMA,EACH0B,OACC,SAAAC,GAAC,OAAIA,EAAEC,MAAQE,EAAKL,MAAMG,MAAQD,EAAEC,KAAOE,EAAKL,MAAMG,KAAO3B,IAE9DgC,OAAOd,OAAAe,EAAA,EAAAf,CAAI,IAAIgB,MAAM,KAAKpB,IAAI,SAAAY,GAAC,MAAK,CAAES,IAAK,GAAIC,KAAM,OACxDT,MAAOE,EAAKL,MAAMG,KAAO3B,GAAnB,QAGT,2CAIHoB,KAAKW,SAAS,CAAEH,QAASR,KAAKI,MAAMI,0CAG7B,IAAAS,EAAAjB,KACDkB,EACJC,KAAKC,KAAKpB,KAAKI,MAAMG,KAAO,IAAM,GAClCY,KAAKC,KAAKpB,KAAKI,MAAMG,KAAO,IAAM,GACpC,OACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKmC,GAAI,QAASC,QAAS,kBAAML,EAAKM,gBACnCJ,KAAKK,MAAMxB,KAAKI,MAAMG,KAAO,IADhC,OAAAK,OAEMZ,KAAKI,MAAMG,KAAO,GAAK,GAAK,IAAM,IAFxCK,OAE6CZ,KAAKI,MAAMG,KAAO,KAE/DvB,EAAAC,EAAAC,cAACC,EAAA,IAAD,CACEC,IAAK8B,EACLvB,OAAQK,KAAKjB,MAAMY,OACnB8B,cAAe,CAAEV,IAAK,SAAUC,KAAM,UACtCU,KAAM,GACNC,OAAQT,EAAU1C,EAAY,MAE9BQ,EAAAC,EAAAC,cAAC0C,EAAD,CAAkBjD,KAAMqB,KAAKI,MAAMzB,gBA/ClBkD,IAAMC,WAsDlBC,6BAAiB,CAC9BC,OAAQ,0CACRC,UAAW,CAAC,kBAFCF,CAGZnC,GCnFYsC,0LARX,OACElD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,OACbnD,EAAAC,EAAAC,cAACkD,EAAD,cAJUN,cCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cbea51a0.chunk.js","sourcesContent":["import React from \"react\";\nimport { GoogleApiWrapper, Map, HeatMap } from \"google-maps-react\";\n\nconst darkTheme = require(\"./dark-theme.json\");\n\nconst gradient = [\n  \"rgba(0, 255, 255, 0)\",\n  \"rgba(0, 255, 255, 1)\",\n  \"rgba(0, 191, 255, 1)\",\n  \"rgba(0, 127, 255, 1)\",\n  \"rgba(0, 63, 255, 1)\",\n  \"rgba(0, 0, 255, 1)\",\n  \"rgba(0, 0, 223, 1)\",\n  \"rgba(0, 0, 191, 1)\",\n  \"rgba(0, 0, 159, 1)\",\n  \"rgba(0, 0, 127, 1)\",\n  \"rgba(63, 0, 91, 1)\",\n  \"rgba(127, 0, 63, 1)\",\n  \"rgba(191, 0, 31, 1)\",\n  \"rgba(255, 0, 0, 1)\"\n];\n\nconst data = require(\"./data/mid-points.json\");\n\nconst step = 10;\nconst startTime = 300;\n\nconst HeatMapComponent = props => {\n  return (\n    <HeatMap\n      key={Date.now()}\n      gradient={gradient}\n      opacity={0.8}\n      positions={props.data}\n      radius={30}\n      map={props.map}\n      google={props.google}\n    />\n  );\n};\n\nclass MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: data.filter(d => d.time >= startTime && d.time < startTime + step),\n      time: startTime,\n      paused: false\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      if (!this.state.paused) {\n        this.setState({\n          data: data\n            .filter(\n              d => d.time >= this.state.time && d.time < this.state.time + step\n            )\n            .concat([...new Array(50)].map(d => ({ lat: 45, lng: -74 }))),\n          time: (this.state.time + step) % (24 * 60)\n        });\n      }\n    }, 1000);\n  }\n\n  togglePause() {\n    this.setState({ paused: !this.state.paused });\n  }\n\n  render() {\n    const isNight =\n      Math.ceil(this.state.time / 60) < 8 ||\n      Math.ceil(this.state.time / 60) > 20;\n    return (\n      <div>\n        <div id={\"clock\"} onClick={() => this.togglePause()}>\n          {Math.floor(this.state.time / 60)}:\n          {`${this.state.time % 60 < 10 ? \"0\" : \"\"}${this.state.time % 60}`}\n        </div>\n        <Map\n          key={isNight}\n          google={this.props.google}\n          initialCenter={{ lat: 45.51809, lng: -73.58809 }}\n          zoom={13}\n          styles={isNight ? darkTheme : null}\n        >\n          <HeatMapComponent data={this.state.data} />\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDGjwBJ_d3V8kJprAOYgF9EtuvkrEkFStQ\",\n  libraries: [\"visualization\"]\n})(MapContainer);\n","import React, { Component } from \"react\";\n\nimport Map from \"./Map\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Map />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}